<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!--
        groupId：包名（域名反写）
        artfactId：项目名
        version：版本
        type：依赖类型，jar或war（默认为jar，表示依赖的是一个jar包），另外当type表示为<type>pom.lastUpdated</type> 这种属性时，表示只将jar的描述信息加载了进来，实际的jar包并未导入。
        classifier：
        scope：
            compile：所有范围此jar都生效
            runtime：在测试和运行时生效；例如JDBC驱动（默认compile，不会报错，扩展了runtime），在编译时是没有用到这个jar包的
            test：在测测试范围此生效，例如Junit（默认compile，扩展了test）
            system：表示我们手动添加的包，不属于maven仓库，属于别的类库的jar包或本地jar
            provided:表示在编译和测试时此jar生效，例如servlet-api，jsp-api，这个的provided必须填写，不能使用compile，原因是：
                        我们在eclispe里创建web项目时，eclipse为我们添加了这两个jar包，离开了eclispe之后，到Tomcat中Tomcat又会为我们提供这两个包，
                        所以一直不会报错，但是在我们创建maven项目时，我们就不是web项目了，所以eclispe不会为我们添加这两个jar包，就需要我们通过maven来添加，
                        但是如果设置了compile，在Tomcat中运行时，就会与Tomcat中提供的这两个包产生冲突，所以要设置为provided，
        systemPath：表示我们手动添加的包，不属于maven仓库，属于别的类库的jar包，只在编译和测试期生效，运行时无效，一般不用，使用时，需要配合下面的systemPath使用；为并非依赖maven的包指明路径
        exclusions：排除传递依赖，解决jar冲突问题；（就近原则，优先原则；不同版本直接，依赖冲突）
        optional
            是 maven的9种依赖属性，-->

    <groupId>com.metoo.nmap</groupId>
    <artifactId>metoo_nmap_route</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>metoo_nmap_route</name>

    <description>metoo_nmap_route</description>
    <properties>
        <java.version>1.8</java.version>
<!--
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>-->
    </properties>


    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <!--移除默认logback框架-->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--Mybatis-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.2</version>
        </dependency>

        <!--Mysql-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <!--<version>5.1.38</version>-->
            <version>8.0.23</version>
        </dependency>

        <!--druid alibaba数据源依赖-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.9</version>
        </dependency>

        <!--Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.14</version>
            <scope>provided</scope>
        </dependency>

        <!--引入shiro整合SpringBoot依赖-->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring-boot-starter</artifactId>
            <version>1.5.3</version>
        </dependency>

        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>1.3.2</version>
        </dependency>

        <!--Shiro缓存：Redis or Lettuce-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>3.2.0</version>
        </dependency>
        <!--End-->

        <!--SpringBoot 热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!--  分页查询插件：暂时使用分页插件，后续改为自己封装分页查询  -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.10</version>
        </dependency>

        <!-- https://mvnrepository.com-->

        <!--Swagger: 在线文档-->
        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>

        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- commons-io 是Apache封装好的库，包含使用程序类、流实现、文件过滤、文件比较器、endian转换类等-->
        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4.10</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.nutz/nutz -->
        <!-- 提供json和注解的方式加载bean-->
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.58</version>
        </dependency>


        <!-- 日志：Log4j2 + self4j --><!-- begin -->
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.17.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.17.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.17.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.30</version>
        </dependency>
        <!-- end -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <!--引入web依赖，非maven管理-->
        <dependency>
            <groupId>external.zabbix.api</groupId>
            <artifactId>self</artifactId>
            <version>0.0.2</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/src/main/resources/lib/self-0.0.2.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
        </dependency>

        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>3.3</version>
        </dependency>

    </dependencies>

    <!--Profile 多环境开发-->
    <build>
        <!--修改打包后项目名称-->
        <finalName>route</finalName>

        <plugins>

        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
                <skip>false</skip>
                <!--<mainClass>NspmApplicationTests</mainClass>-->
                <!--&lt;!&ndash;配置可执行jar的名称，不对原jar重命名为.original&ndash;&gt;-->
                <!--<classifier>exec</classifier>-->

                <!-- 在打包时将引用的外部jar引入到当前项目包中	-->
                <includeSystemScope>true</includeSystemScope>

            </configuration>
        </plugin>
    </plugins>

        <!--xml文件不能编译到.class文件夹下，mybatis 的mapper文件也编译到class下-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
            <!--将页面编译到指定位置<targetPath>META-INF</targetPath>-->
            <resource>
                <directory>src/main/webapp</directory>
                <targetPath>META-INF/resources</targetPath>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>
    </build>


</project>
